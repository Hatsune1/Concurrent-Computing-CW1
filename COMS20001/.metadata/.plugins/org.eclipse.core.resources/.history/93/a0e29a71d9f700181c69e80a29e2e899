// COMS20001 - Cellular Automaton Farm - Initial Code Skeleton
// (using the XMOS i2c accelerometer demo code)

#include <platform.h>
#include <xs1.h>
#include <stdio.h>
#include "pgmIO.h"
#include "i2c.h"

#define  IMHT 16                  //image height
#define  IMWD 16                  //image width
#define  DEAD 0
#define  ALIVE 255
#define  SEP_GREEN_LED 1
#define  BLUE_LED 2
#define  GREEN_LED 4
#define  RED_LED 8

#define  WORKER_AMOUNT 4
#define  LINES_PER_WORKER 4
#define  IMAGE_HEIGHT_PER_WORKER 6
#define  CONTINUE 1
#define  OUTPUT 2
#define  NOT_OUTPUT 0

typedef unsigned char uchar;      //using uchar as shorthand

on tile[0]: port p_scl = XS1_PORT_1E;         //interface ports to orientation
on tile[0]: port p_sda = XS1_PORT_1F;

#define FXOS8700EQ_I2C_ADDR 0x1E  //register addresses for orientation
#define FXOS8700EQ_XYZ_DATA_CFG_REG 0x0E
#define FXOS8700EQ_CTRL_REG_1 0x2A
#define FXOS8700EQ_DR_STATUS 0x0
#define FXOS8700EQ_OUT_X_MSB 0x1
#define FXOS8700EQ_OUT_X_LSB 0x2
#define FXOS8700EQ_OUT_Y_MSB 0x3
#define FXOS8700EQ_OUT_Y_LSB 0x4
#define FXOS8700EQ_OUT_Z_MSB 0x5
#define FXOS8700EQ_OUT_Z_LSB 0x6

on tile[0] : in port buttons = XS1_PORT_4E; //port to access xCore-200 buttons
on tile[0] : out port leds = XS1_PORT_4F;   //port to access xCore-200 LEDs

int showLEDs(out port p, chanend fromDist) {
  int pattern;
  while (1) {
    fromDist :> pattern;   //receive new pattern from visualiser
    if (pattern == -1) {
        p <: 0;
        break;
    }
    else p <: pattern;                //send pattern to LED port
  }
  return 0;
}

//READ BUTTONS and send button pattern to userAnt
void buttonListener(in port b, chanend inToDist, chanend outToDist) {
  int r;
  while (1) {
    b when pinseq(15)  :> r;                 // check that no button is pressed
    b when pinsneq(15) :> r;                 // check if some buttons are pressed
    if (r==13) inToDist <: r;           // send button pattern to userAnt
    if (r==14) outToDist <: r;
  }
}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Read Image from PGM file from path infname[] to channel c_out
//
/////////////////////////////////////////////////////////////////////////////////////////
void DataInStream(char infname[], chanend c_out)
{
  int res;
  uchar line[ IMWD ];

  printf( "DataInStream: Start...\n" );

  //Open PGM file
  res = _openinpgm( infname, IMWD, IMHT );
  if( res ) {
    printf( "DataInStream: Error openening %s\n.", infname );
    return;
  }

  //Read image line-by-line and send byte by byte to channel c_out
  for( int y = 0; y < IMHT; y++ ) {
    _readinline( line, IMWD );
    for( int x = 0; x < IMWD; x++ ) {
      c_out <: line[ x ];
    }
  }

  //Close PGM image file
  _closeinpgm();
  printf( "DataInStream: Done...\n" );
  return;
}

int ToLiveOrNotToLive (uchar tl, uchar t, uchar tr, uchar l, uchar self, uchar r, uchar bl, uchar b, uchar br) {
    int dead = 0;
    int alive = 0;
    uchar cells[8];

    cells[0] = tl;
    cells[1] = t;
    cells[2] = tr;
    cells[3] = l;
    cells[4] = r;
    cells[5] = bl;
    cells[6] = b;
    cells[7] = br;

    for(int i = 0; i < 8; i++) {
        if (cells[i] == DEAD) dead++;
        if (cells[i] == ALIVE) alive++;
    }

    if (alive < 2 && self == ALIVE) return DEAD;
    else if (alive > 3 && self == ALIVE) return DEAD;
    else if (alive == 3 && self == DEAD) return ALIVE;
    else return self;
}

void workers (chanend fromPrevious, chanend toPrevious, chanend fromNext, chanend toNext, chanend fromDist) {
    uchar image [IMAGE_HEIGHT_PER_WORKER][IMWD];
    uchar bufPreResult [IMWD];
    uchar bufCurResult [IMWD];
    int value;
    uchar val;

    //Get the part of image to be processed by this worker
    for (int y = 1; y < IMAGE_HEIGHT_PER_WORKER-1; y++) {
      for (int x = 0; x < IMWD; x++) {
        fromDist :> image[y][x];
      }
    }

    while(1) {
        int liveNum = 0;
        //Send and get extra lines from other workers
        for (int x = 0; x < IMWD; x++) {
        printf("00\n");
        val = image[IMAGE_HEIGHT_PER_WORKER-2][x];
        toNext <: val;
        printf("01\n");
        toPrevious <: image[1][x];
        printf("02\n");
        fromPrevious :> image[0][x];
        printf("03\n");
        fromNext :> image[IMAGE_HEIGHT_PER_WORKER-1][x];
        printf("04\n");
        }

        //Process cells
        for( int y = 1; y < IMAGE_HEIGHT_PER_WORKER-1; y++ ) {
            for( int x = 0; x < IMWD; x++ ) {
                if (y < IMAGE_HEIGHT_PER_WORKER-1){
                    bufCurResult[x] = ToLiveOrNotToLive (
                            image[(y-1+IMHT)%IMHT][(x-1+IMWD)%IMWD], image[(y-1+IMHT)%IMHT][x], image[(y-1+IMHT)%IMHT][(x+1+IMWD)%IMWD],
                            image[y][(x-1+IMWD)%IMWD],               image[y][x],               image[y][(x+1+IMWD)%IMWD],
                            image[(y+1+IMHT)%IMHT][(x-1+IMWD)%IMWD], image[(y+1+IMHT)%IMHT][x], image[(y+1+IMHT)%IMHT][(x+1+IMWD)%IMWD]);
                    //printf("-%4.1d ", bufCurResult[y][x]);
                }
                if (y > 1){
                    image[y-1][x] = bufPreResult[x];
                }
                bufCurResult[x] = bufPreResult[x];
                if (bufPreResult[x] == ALIVE) liveNum++;
            }
            //printf("\n");
        }

        //Check if needs output
        fromDist :> value;
        if (value) {
            for (int y = 1; y < IMAGE_HEIGHT_PER_WORKER-1; y++) {
                for (int x = 0; x < IMWD; x++) {
                    fromDist <: image[y][x];
                }
            }
        }

        fromDist <: liveNum;
        //Receive signal for next round
        fromDist :> int value;
    }
}

void distributor (chanend fromIN, chanend toOUT, chanend fromORI,
        chanend fromButtonIN, chanend fromButtonOUT, chanend toLED,
        chanend worker[WORKER_AMOUNT]){
    int value;
    int round = 0;
    int liveNum = 0;

    timer tmr;
    int startTime;
    int stopTime;
    int totalTime;
    int pauseTime = 0;
    int isPaused = 0;
    int isOutput = 0;

    uchar val;

    printf( "ProcessImage: Start, size = %dx%d\n", IMHT, IMWD );
    printf( "Waiting for Button Press...\n" );
    fromButtonIN :> value;
    printf( "Processing...\n" );

    // Show green LED
    toLED <: GREEN_LED;
    // When the Read button was pressed,
    // read from file and hand out to workers.
    for (int i = 0; i < WORKER_AMOUNT; i++){
        for (int y = LINES_PER_WORKER * i; y < (i+1) * LINES_PER_WORKER; y++){
            for (int x = 0; x < IMWD; x++){
                fromIN :> val;
                worker[i] <: val;
            }
        }
    }
    // Record start time.
    tmr :> startTime;

    // Execute the main loop.
    while(1){
        select {
            // When the output button was pressed, export data and show blue LED
            case fromButtonOUT :> value:{
                if (!isOutput) {
                    isOutput = 1;
                    toOUT <: 1;
                    for (int i = 0; i < WORKER_AMOUNT; i++){
                        worker[i] <: 1;
                        for (int y = LINES_PER_WORKER * i; y < (i+1) * LINES_PER_WORKER; y++){
                            for (int x = 0; x < IMWD; x++){
                                worker[i] :> val;
                                toOUT <: val;
                            }
                        }
                    }
                    toLED <: BLUE_LED;
                    break;
                }
                if (isOutput) break;
                break;
            }
            // When tilted, report the number of rounds and live cells,
            // time passed after read file, and show red LED.
            case fromORI :> value:{
                // Record stop time and report only when tilt begin.
                if(!isPaused){
                    if (value) {
                        tmr :> stopTime;
                        totalTime = stopTime - startTime - pauseTime;
                        printf("Round: %d\n", round);
                        printf("Live number is %d\n", liveNum);
                        int printTimeSec = totalTime / 100000000;
                        int printTimeMiliSec = (totalTime - printTimeSec * 100000000) / 100000;
                        printf("Time passed: %d.%ds\n", printTimeSec, printTimeMiliSec);
                        isPaused = 1;
                        toLED <: RED_LED;
                    }
                    if (!value) break;
                }
                if (isPaused) {
                    if (value) break;
                    if (!value) {
                        tmr :> value;
                        pauseTime += value - stopTime;
                        isPaused = 0;
                    }
                }
                break;
            }
            default:{
                printf("In default.");
                if (isPaused == 0) {
                    liveNum = 0;
                    //printf( "\nOne processing round completed...\n" );
                    for (int i = 0; i < WORKER_AMOUNT; i++) {
                        if (!isOutput) worker[i] <: 0;
                        worker[i] :> value;
                        liveNum += value;
                        worker[i] <: CONTINUE;
                    }
                    // Add 1 to round and show separate green LED.
                    round ++;
                    isOutput = 0;
                    if (round%2==1) toLED <: SEP_GREEN_LED;
                    else toLED <: 0;
                }
                break;
            }
        }
    }
}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Write pixel stream from channel c_in to PGM image file
//
/////////////////////////////////////////////////////////////////////////////////////////
void DataOutStream(char outfname[], chanend c_in)
{
  int res;
  uchar line[ IMWD ];

  while(1) {
      c_in :> int value;
      //Open PGM file
      printf( "DataOutStream: Start...\n" );
      res = _openoutpgm( outfname, IMWD, IMHT );
      if( res ) {
          printf( "DataOutStream: Error opening %s\n.", outfname );
      }

      //Compile each line of the image and write the image line-by-line
      for( int y = 0; y < IMHT; y++ ) {
          for( int x = 0; x < IMWD; x++ ) {
              c_in :> line[ x ];
          }
          _writeoutline( line, IMWD );
          printf( "DataOutStream: Line written...\n" );
      }

      //Close the PGM image
      _closeoutpgm();
      printf( "DataOutStream: Done...\n" );
  }
}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Initialise and  read orientation, send first tilt event to channel
//
/////////////////////////////////////////////////////////////////////////////////////////
void orientation( client interface i2c_master_if i2c, chanend toDist) {
  i2c_regop_res_t result;
  char status_data = 0;
  int isPaused = 0;

  // Configure FXOS8700EQ
  result = i2c.write_reg(FXOS8700EQ_I2C_ADDR, FXOS8700EQ_XYZ_DATA_CFG_REG, 0x01);
  if (result != I2C_REGOP_SUCCESS) {
    printf("I2C write reg failed\n");
  }
  
  // Enable FXOS8700EQ
  result = i2c.write_reg(FXOS8700EQ_I2C_ADDR, FXOS8700EQ_CTRL_REG_1, 0x01);
  if (result != I2C_REGOP_SUCCESS) {
    printf("I2C write reg failed\n");
  }

  //Probe the orientation x-axis forever
  while (1) {

    //check until new orientation data is available
    do {
      status_data = i2c.read_reg(FXOS8700EQ_I2C_ADDR, FXOS8700EQ_DR_STATUS, result);
    } while (!status_data & 0x08);

    //get new x-axis tilt value
    int x = read_acceleration(i2c, FXOS8700EQ_OUT_X_MSB);

    //send signal to distributor if tilted
    if (x>35 && isPaused == 0) {
        toDist <: 1;
        isPaused = 1;
    }
    if (x<25 && isPaused == 1) {
        toDist <: 0;
        isPaused = 0;
    }
  }
}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Orchestrate concurrent system and start up all threads
//
/////////////////////////////////////////////////////////////////////////////////////////
int main(void) {

i2c_master_if i2c[1];                                 //interface to orientation

//char infname[] = "test.pgm";                          //put your input image path here
//char outfname[] = "testout.pgm";                      //put your output image path here
chan c_inIO, c_outIO,
     orientationToDistributor,
     button1ToDistributor, button2ToDistributor,
     distributorToLEDs,
     worker[WORKER_AMOUNT],
     w0to1, w1to2, w2to3, w3to0,
     w0to3, w3to2, w2to1, w1to0;


par {
    on tile[0]: i2c_master(i2c, 1, p_scl, p_sda, 10);             //server thread providing orientation data
    on tile[0]:  orientation(i2c[0],orientationToDistributor);     //client thread reading orientation data
    on tile[0]: DataInStream("test.pgm", c_inIO);                    //thread to read in a PGM image
    on tile[0]: DataOutStream("testout.pgm", c_outIO);                 //thread to write out a PGM image
    on tile[0]: distributor(c_inIO, c_outIO, orientationToDistributor, button1ToDistributor, button2ToDistributor, distributorToLEDs, worker);
    on tile[0]: buttonListener(buttons, button1ToDistributor, button2ToDistributor);
    on tile[0]: showLEDs(leds,distributorToLEDs);
    on tile[1]: workers(w3to0, w0to3, w1to0, w0to1, worker[0]);
    on tile[1]: workers(w0to1, w1to0, w2to1, w1to2, worker[1]);
    on tile[1]: workers(w1to2, w2to1, w3to2, w2to3, worker[2]);
    on tile[1]: workers(w2to3, w3to2, w0to3, w3to0, worker[3]);
  }
  return 0;
}
